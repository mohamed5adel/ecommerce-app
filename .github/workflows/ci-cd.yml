name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Build and test the application
  build-and-test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: app/package-lock.json
        
    - name: Install dependencies
      run: |
        cd app
        npm ci
        
    - name: Run tests
      run: |
        cd app
        npm test
        
    - name: Build Docker image
      run: |
        cd app
        docker build -t $IMAGE_NAME:${{ github.sha }} .
        docker build -t $IMAGE_NAME:latest .
        
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: $REGISTRY
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Push Docker image
      run: |
        cd app
        docker tag $IMAGE_NAME:${{ github.sha }} $REGISTRY/$IMAGE_NAME:${{ github.sha }}
        docker tag $IMAGE_NAME:latest $REGISTRY/$IMAGE_NAME:latest
        docker push $REGISTRY/$IMAGE_NAME:${{ github.sha }}
        docker push $REGISTRY/$IMAGE_NAME:latest
        
    - name: Upload Docker image as artifact
      uses: actions/upload-artifact@v4
      with:
        name: docker-image
        path: app/
        retention-days: 1

  # Deploy to k3s cluster
  deploy:
    needs: build-and-test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download Docker image artifact
      uses: actions/download-artifact@v4
      with:
        name: docker-image
        
    - name: Set up kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'latest'
        
    - name: Configure kubectl
      run: |
        mkdir -p ~/.kube
        echo "${{ secrets.KUBE_CONFIG }}" | base64 -d > ~/.kube/config
        chmod 600 ~/.kube/config
        
    - name: Deploy to Kubernetes
      run: |
        # Update the image tag in deployment
        sed -i "s|image: devops-demo-app:latest|image: $REGISTRY/$IMAGE_NAME:latest|g" k8s/manifests/deployment.yaml
        
        # Apply Kubernetes manifests
        kubectl apply -f k8s/manifests/
        
        # Wait for deployment to be ready
        kubectl rollout status deployment/devops-demo-app -n default --timeout=300s
        
        # Verify deployment
        kubectl get pods -n default
        kubectl get services -n default
        
    - name: Health check
      run: |
        # Wait a bit for services to be ready
        sleep 30
        
        # Get the NodePort service IP
        NODE_IP=$(kubectl get nodes -o jsonpath='{.items[0].status.addresses[?(@.type=="ExternalIP")].address}')
        if [ -z "$NODE_IP" ]; then
          NODE_IP=$(kubectl get nodes -o jsonpath='{.items[0].status.addresses[?(@.type=="InternalIP")].address}')
        fi
        
        # Test health endpoint
        curl -f "http://$NODE_IP:30000/health" || exit 1
        
    - name: Notify deployment status
      if: always()
      run: |
        if [ ${{ job.status }} == 'success' ]; then
          echo "✅ Deployment successful!"
          echo "Application is available at: http://$NODE_IP:30000"
        else
          echo "❌ Deployment failed!"
          exit 1
        fi

  # Optional: Deploy to ECR (if configured)
  deploy-ecr:
    needs: build-and-test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && vars.USE_ECR == 'true'
    
    steps:
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ vars.AWS_REGION }}
        
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2
      
    - name: Build and push to ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: ${{ vars.ECR_REPOSITORY_NAME }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        cd app
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:latest .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest

